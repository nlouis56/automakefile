#!/usr/bin/bash
##
## EPITECH PROJECT
## automakefile
## File description:
## Synthesis pt. 2, automakefile
##

function flags_init
{
    IFS=";"
    i=0
    while read line
    do
        array=($line)
        if [ ${array[0]} == "SOURCES_DIR" ]
        then
            src_dir=${array[1]}
        elif [ ${array[0]} == "PROJECT_DIR" ]
        then
            project_dir=${array[1]}
        elif [ ${array[0]} == "HEADERS_DIR" ]
        then
            include_dir=${array[1]}
        elif [ ${array[0]} == "LIBS_DIR" ]
        then
            lib_dir=${array[1]}
        elif [ ${array[0]} == "EXEC" ]
        then
            bin_name=${array[1]}
        elif [ ${array[0]} == "CC" ]
        then
            comp=${array[1]}
        elif [ ${array[0]} == "CFLAGS" ]
        then
            c_flags=${array[1]}
        elif [ ${array[0]} == "LDFLAGS" ]
        then
            link_flags=${array[1]}
        elif [ ${array[0]} == "BCK_DIR" ]
        then
            backup=${array[1]}
        elif [ ${array[0]} == "ZIP" ]
        then
            comp_bin=${array[1]}
        elif [ ${array[0]} == "ZIPFLAGS" ]
        then
            comp_flags=${array[1]}
        elif [ ${array[0]} == "UNZIP" ]
        then
            decomp_bin=${array[1]}
        elif [ ${array[0]} == "UNZIPFLAGS" ]
        then
            decomp_flags=${array[1]}
        elif [ "c" == $(echo "${array[0]}" | cut -d "." -s -f 2) ]
        then
            src[i]=${array[0]}
            ((i++))
        fi
    done < $configuration_file
}

function makefile_init
{
    if [ -r Makefile ]
    then
        rm -f $project_dir/Makefile
        touch $project_dir/Makefile
    else
        touch $project_dir/Makefile
    fi
    echo "##
## EPITECH PROJECT
## $project_dir
## File description:
## Makefile (automatic generation)
##" > $project_dir/Makefile
}

function fill_makefile
{
    echo >> ${project_dir}/Makefile
    if [ $src_dir == "." ]
    then
        echo -n "SRC	=" >> ${project_dir}/Makefile
    else
        echo -n "SRC	=" >> ${project_dir}/Makefile
    fi
    j=0
    for ((j = 0; i - j; j++))
    do
        if [ $src_dir == "." ]
        then
            if [ $j == 0 ]
            then
                echo -e "\t${src[$j]} \\" >> ${project_dir}/Makefile
            else
                echo -e "\t\t${src[$j]} \\" >> ${project_dir}/Makefile
            fi
        else
            if [ $j == 0 ]
            then
                echo -e "\t$src_dir/${src[$j]} \\" >> ${project_dir}/Makefile
            else
                echo -e "\t\t$src_dir/${src[$j]} \\" >> ${project_dir}/Makefile
            fi
        fi
    done
    echo >> ${project_dir}/Makefile
    echo "I_DIR	=	$include_dir" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "L_DIR	=	$lib_dir/" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "NAME	=	$bin_name" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "CFLAGS	=	$c_flags" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "LDFLAGS	=	$link_flags" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "CC	=	$comp" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
}

function fill_rules
{
    echo >> ${project_dir}/Makefile
    echo "all:" >> ${project_dir}/Makefile
    echo "	\$(CC) \$(SRC) -o \$(NAME) \$(CFLAGS) -I \$(I_DIR) \$(LDFLAGS)" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "clean:" >> ${project_dir}/Makefile
    echo "	rm -f *.o" >> ${project_dir}/Makefile
    echo "	rm -f vgcore*" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "fclean:	clean" >> ${project_dir}/Makefile
    echo "	rm -rf \$(NAME)" >> ${project_dir}/Makefile
    echo "	rm -rf *.c~ *.gcno *.gcda '#*#'" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "re:	fclean all" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo ".PHONY: all clean fclean re" >> ${project_dir}/Makefile
}

if [ -z $1 ]
then
    echo "please enter a configuration file name"
    exit 84
else
    if [ -r $1 ] && [ -z $2 ]
    then
        configuration_file=$1
        flags_init
        makefile_init
        fill_makefile
        fill_rules
    elif [ -z $2 ]
    then
        echo "no valid configuration file"
        exit 84
    else
        echo "this script only takes one argument"
        exit 84
    fi
fi
