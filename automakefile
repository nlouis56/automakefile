#!/usr/bin/bash
##
## EPITECH PROJECT
## automakefile
## File description:
## Synthesis pt. 2, automakefile
##

function flags_init
{
    IFS=";"
    i=0
    while read line
    do
        parsed_line=($line)
        if [ ${parsed_line[0]} == "PROJECT_DIR" ]
        then
            project_dir=${parsed_line[1]}
        elif [ ${parsed_line[0]} == "SOURCES_DIR" ]
        then
            src_dir=${parsed_line[1]}
        elif [ ${parsed_line[0]} == "HEADERS_DIR" ]
        then
            include_dir=${parsed_line[1]}
        elif [ ${parsed_line[0]} == "LIBS_DIR" ]
        then
            lib_dir=${parsed_line[1]}
        elif [ ${parsed_line[0]} == "EXEC" ]
        then
            bin_name=${parsed_line[1]}
        elif [ ${parsed_line[0]} == "CC" ]
        then
            comp=${parsed_line[1]}
        elif [ ${parsed_line[0]} == "CFLAGS" ]
        then
            c_flags=${parsed_line[1]}
        elif [ ${parsed_line[0]} == "LDFLAGS" ]
        then
            link_flags=${parsed_line[1]}
        elif [ ${parsed_line[0]} == "BCK_DIR" ]
        then
            backup=${parsed_line[1]}
        elif [ ${parsed_line[0]} == "ZIP" ]
        then
            comp_bin=${parsed_line[1]}
        elif [ ${parsed_line[0]} == "ZIPFLAGS" ]
        then
            comp_flags=${parsed_line[1]}
        elif [ ${parsed_line[0]} == "UNZIP" ]
        then
            decomp_bin=${parsed_line[1]}
        elif [ ${parsed_line[0]} == "UNZIPFLAGS" ]
        then
            decomp_flags=${parsed_line[1]}
        elif [[ "c" == $(echo "${parsed_line[0]}" | cut -d "." -s -f 2) ]]
        then
            src[i]=${parsed_line[0]}
            ((i++))
        else
            echo "unknown flag in the config file"
        fi
    done < $configuration_file
}

function makefile_init
{
    if [ -r Makefile ]
    then
        rm -f $project_dir/Makefile
        touch $project_dir/Makefile
    else
        touch $project_dir/Makefile
    fi
    echo "##
## EPITECH PROJECT
## $project_dir
## File description:
## Makefile (automatic generation)
##" > $project_dir/Makefile
}

function fill_makefile
{
    echo >> ${project_dir}/Makefile
    if [ $src_dir == "." ]
    then
        echo -n "SRC	=" >> ${project_dir}/Makefile
    else
        echo -n "SRC	=" >> ${project_dir}/Makefile
    fi
    j=0
    for ((j = 0; i - j; j++))
    do
        if [ $src_dir == "." ]
        then
            if [ $j == 0 ]
            then
                echo -e "\t${src[$j]} \\" >> ${project_dir}/Makefile
            else
                echo -e "\t\t${src[$j]} \\" >> ${project_dir}/Makefile
            fi
        else
            if [ $j == 0 ]
            then
                echo -e "\t$src_dir/${src[$j]} \\" >> ${project_dir}/Makefile
            else
                echo -e "\t\t$src_dir/${src[$j]} \\" >> ${project_dir}/Makefile
            fi
        fi
    done
    echo >> ${project_dir}/Makefile
    echo "I_DIR	=	$include_dir" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "L_DIR	=	$lib_dir/" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "NAME	=	$bin_name" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "CFLAGS	=	$c_flags" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "LDFLAGS	=	$link_flags" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "CC	=	$comp" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
}

function fill_rules
{
    echo >> ${project_dir}/Makefile
    echo "all:" >> ${project_dir}/Makefile
    echo "	\$(CC) \$(SRC) -o \$(NAME) \$(CFLAGS) -I \$(I_DIR) \$(LDFLAGS)" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "clean:" >> ${project_dir}/Makefile
    echo "	rm -f *.o" >> ${project_dir}/Makefile
    echo "	rm -f vgcore*" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "fclean:	clean" >> ${project_dir}/Makefile
    echo "	rm -rf \$(NAME)" >> ${project_dir}/Makefile
    echo "	rm -rf *.c~ *.gcno *.gcda '#*#'" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo "re:	fclean all" >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo >> ${project_dir}/Makefile
    echo ".PHONY: all clean fclean re" >> ${project_dir}/Makefile
}

function insert_the_cow
{
    echo "##	 ___________________________" >> ${project_dir}/Makefile
    echo "##	< what a beautiful Makefile >" >> ${project_dir}/Makefile
    echo "##	---------------------------" >> ${project_dir}/Makefile
    echo "##	        \   ^__^" >> ${project_dir}/Makefile
    echo "##	         \  (oo)\_______" >> ${project_dir}/Makefile
    echo "##	            (__)\       )\/\\" >> ${project_dir}/Makefile
    echo "##	                ||----w |" >> ${project_dir}/Makefile
    echo "##	                ||     ||" >> ${project_dir}/Makefile

}

function help_message
{

    echo "┌────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                    │
│                 m                         #               m\"\"    \"    \"\"#          │
│  mmm   m   m  mm#mm   mmm   mmmmm   mmm   #   m   mmm   mm#mm  mmm      #     mmm  │
│ \"   #  #   #    #    #\" \"#  # # #  \"   #  # m\"   #\"  #    #      #      #    #\"  # │
│ m\"\"\"#  #   #    #    #   #  # # #  m\"\"\"#  #\"#    #\"\"\"\"    #      #      #    #\"\"\"\" │
│ \"mm\"#  \"mm\"#    \"mm  \"#m#\"  # # #  \"mm\"#  #  \"m  \"#mm\"    #    mm#mm    \"mm  \"#mm\" │
│                                                                                    │
│                                                                                    │
└────────────────────────────────────────────────────────────────────────────────────┘
"
    echo
    echo "USAGE :
    ./automakefile [conf_file]

	The configuration file is used to build the makefile, it should be built like this :"
    echo
    echo "	• source_filename;dependence1 dependence2...
	(specify the full names of the files, from the header subfolder below)
	• PROJECT_DIR;name_of_the_project_root_folder
	• SOURCES_DIR;subfolder_containing_the_source_files
	• HEADERS_DIR;subfolder_containing_the_header_files
	• LIBS_DIR;subfolder_containing_librairies
	• EXEC;executable_name
	• CC;compilator_binary
	• CFLAGS;compilation_flag1 compilation_flag1...
	• LDFLAGS;linking_flag1 linking_flag2..."
    echo
    echo "	The source file names and the project directory are mandatory,
	the program will exit with an error message if not present"
    echo
    echo "	If not specified otherwise, the default compiler is gcc"
    echo "	The default binary name is a.out, unless specified otherwise"
    echo
    echo
    echo "	-h can be used to see this message"
}

if [ -z $1 ]
then
    echo "please enter a configuration file name"
    exit 84
else
    if [ -r $1 ] && [ -z $2 ]
    then
        configuration_file=$1
        flags_init
        if [ -z $project_dir ]
        then
            echo "no project directory, aborting"
            exit 84
        elif [ -z ${src[0]} ]
        then
            echo "no source files, aborting"
            exit 84
        else
            if [ -z $bin_name ]
            then
                bin_name="a.out"
            fi
            if [ -z $comp ]
            then
                comp="gcc"
            fi
            makefile_init
            fill_makefile
            fill_rules
        fi
    elif [ -z $2 ]
    then
        if [ $1 == "-h" ]
        then
            help_message
            exit 0
        else
            echo "no valid configuration file"
            exit 84
        fi
    else
        echo "this script only takes one argument"
        exit 84
    fi
fi
echo >> ${project_dir}/Makefile
echo >> ${project_dir}/Makefile
insert_the_cow
exit 0